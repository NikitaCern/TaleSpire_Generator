import json
import unittest
import time
import pyperclip

from generator.generator import Generator
from objects.assetManager import AssetManager
from converter.conversionManager import ConversionManager


class TestGenerator(unittest.TestCase):

    @classmethod
    def setUpClass(self):
        print("\nGenerate: ", end='')
        # self.maxDiff = None

        self.customObjects = {
            "Tree_4": AssetManager.addCustomAsset(
                "Tree_4",
                "```H4sIAAAAAAAACzv369xFJgZmBgYGV8sOe+Zcb6+FuwOFhA/vvMUIFGP54+9t4qri2XJlvvU8595GJqDYnexlT8+YiztvObZwR4/xpJcgdYwMEmxACmiOAIsBQwMjEwMHUwADBEBoAGi/N01oAAAA```"
            ),
            "Tree_3": AssetManager.addCustomAsset(
                "Tree_3",
                "```H4sIAAAAAAAACzv369xFJgYWBgYGJ8kbgpNqqpxbpJeV8cZNqGMEirladtgz53p7LdwdKCR8eOctkBjLH39vE1cVz5Yr863nOfc2gsTuZC97esZc3HnLsYU7eownvQSJMTMIsAQAaTYGCTYgxcDIwMG0gQECIDQAM1rOhHwAAAA=```"
            ),
            "Tree_2": AssetManager.addCustomAsset(
                "Tree_2",
                "```H4sIAAAAAAAACzv369xFJgZmBgYGV8sOe+Zcb6+FuwOFhA/vvMUIFGP54+9t4qri2XJlvvU8595GkNid7GVPz5iLO285tnBHj/GklyAxLgYBFgYw4GBSYGRgBokpgAgGAJmdG+RgAAAA```"
            ),
            "Tree_1": AssetManager.addCustomAsset(
                "Tree_1",
                "```H4sIAAAAAAAACzv369xFJgYmBgYGV8sOe+Zcb6+FuwOFhA/vvMUIFLuTvezpGXNx5y3HFu7oMZ70EiTGz8ABUg4GE8AkAIf2hGVEAAAA```"
            ),
            "Crypt": AssetManager.addCustomAsset(
                "Crypt",
                "```H4sIAAAAAAAAC1WUf3BU1RXHz33nJRt1kfyQwAqSHU1KJCuGBCX8SOYBSxLJ5gfywxjBggZksHbCTFo1GLjQ1MoU6EtqEVpDVgsDJJWu1ZFKABcJspRthJJicEonI6ihJrDQdaDRGXrOvS9D+/75zPme886999xzbvdQ9xkD7geA5LePie9eb/NvLtlR9HnRmh88QNqma2OTXr9e+NjvYuVTV8dqvhSk2VuXu9f1P13+i2Zv+J7/DP3GJO3j1mb3rca1JZue+OsnHR//rMNNWlHZW2PSRi/wv9oamNVxdsHXCaRtXPxhdk/m0dL91vFYpnny3XTSrhSemGi/3O5/o0C+dKHn7EAyaf4TYlJe45a5+yOBpxtnh57hNRY2t+XPX+Qp3pb+XPqG9g+2c77KnbIAl38zZ2PlrY6XW4v+xnH73v12WvqzaeX2udTgwZPHto4m7dTOjsKl1wfn7D+6prWoZlM2kvbny3us65/lVLT8MXTr30baKv533vwVK1/8tCPwzsy5DS3zVp3nc/Rcm7ZmXKc5p/mG7E+q73rFIO3Hi9euGRd+wnq/5tDVN5fbx1k78WhZ48RAcsWbX0aD70eWHOH9jWk4vK5rZePcjrGzJp28nOVPJO3I/vGbdx8/53/18KjA5Qsb7mOtcHr0txdLPyl5b+O9LZPd8ibXuaX9X289+fBXxbvfrpm94P7OMl7jwhT8fYd1oEzmzhma8VT+p6yVNHn3jh3xXcmeU3uW3LhvyJ9E2sCW7D/kTG0IHBg5vTTlSW8Hn/eXV3eHvto3VPqrxfHCcbcyZ6eStnZCwfH05Tcrd/06K6sXFnVyDY6dfyGy6vDq8pY3Pvh+xdXOHtZ2/bPo7KKsySVNfz+wc8nOhlpet6148Ivu54PlG6f/9B9m6+aPeM+fj37n6/Nrz5QcyS8OHT307Pp7SLvj2MGBs+P3zXutvLtz/FE7V93lutTBUUvbrD+d23ax98Jz37Pmr0gbtFOvl723su5UzqUVF7l+ZwbzBz+8GfK3ujszlo072JVCmhe9KLOkyQSPpnRLM0IeAGnaQrPa0GSd/EL5PZr0v+A41lW8x7FJ5/9YV/97HJt0tR7l4x1AmaYscuw8x85ybI9jux17eD95znp5zn7ynHXKtJ/zKX+ZJtsRZ72Is57aR55z7mGb/DfESwnhbMBqY0pSmC43AorKhjxtE3Gb1oFpZfDutM1km+ODI3l/mra4bVsF2mZyHFP9n6PzMdFowhideK+w0ZsAeIpYhdK827DRpmo8aryGp6mBrsEyoy4JcBC85ukkab4I9YaVRj1u1BtwpxTPY70RS5FiC76Cy8YC1pA/mdZrw7AhZwPuwF4MBSgOujA2T5qXiEGyE3DADFZIcwfERVUxwESxDJOLpdkkVmGI/puIu1zeCsDp+KPEUJUUBQgYJH5mANZVAgjsQ29Amh8ZxMcAH6f1vfRfLfQjny9CpHObPtGv+iSuabLOVHGpOl5maYKH66t1JutM1qsNnUf5KT/nG86v66xpC/ZLMy50HNt0X6jiM6ToMU6b4ANIEVEz5AtDrxE1Y2OsBA/Z3hwrYZRgOwx8f95HOM9thlP1vTKb+LGg/mJyfymb+usQ3Zk1n9fT9DmsBc0I6M8WmtWGpvofnHxuJ5/HsdUcw+2P5kFFF2nSugL+73P8bkf3ODbN53rqh+AkwHJi7oMADxOtTK6rlWgVANTCbfI+WJf0wP8FfGg9JM0osY/qsReCLm++FO1G0BWbBpiLQZfMlaKb/Q9I8RPDh14XwA+FD2034F7Rb4QSAduNPhf372HodckMaQoRdYVTuC40dx5nDj363vjccU3xrRiTYNHcXhaWGZoAKAxNtr0PapvJ8TzHPodDoPMMqX7j+9E2k+043SSdUPgU+b8m1W9xRe3neJ8ioC0CJtelmfqkLh9gqaHJ+fld4LzMuOi6g+IVOZ9PE31aV+dl8nk5Tr0TGfr94X5dDz2YTHVrNXqojlLU4yVMTtJzRX2NTO5LPifTdhh3yPPAvGIMz2MT8vtUbQyzX1H56V1j8j6vOPu/ourkrJeq1+N9RZx5ZfL/tc6c81wOc3i+mbZYeBe/p3FNYJvzxTVVvdjP9eO+noBVomoE4AbYjlUUX0e0qb83QBT76D3aTayid6sSiVOlOYqYOw0gmygLpWgg1hGfYnsy4DM4oOqwmlg3BeBxzDRDU6RYiAvN4CPkp/zhhwBmEWUpQAPRS+9Hg9iOwURpzsAwxu7k920X1t0lxc+JfSN0n3D/2Iq6X/hd4Prq9yvJpedIk21dF80tEHXBTCuhGqMua0YYromZbm8a4FbSrZFhXEL66bstI0LxXBef0LQdxh1WG5qH/oe6PxRB/6+p75P2k+HoHk19D4qo8ng0+b6ZfN8A/wXCYdJlBAsAAA==```"
            ),

        }

    def tearDown(self) -> None:
        return super().tearDown()

    def setUp(self):
        self.generator = Generator()
        self.generator.setXYZ(3, 3, 10)
        self.generator.setOctaves(1, 0.5)
        self.generator.setScales(1, 64)
        self.generator.setExponent(2.0)

    def arrayCompare(self, generated, expected, delta):
        msg = ""
        for x in range(0, 3):
            for y in range(0, 3):
                if abs(expected[x][y] - generated[x][y]) > delta:
                    msg += f"""({x}, {y}) dif = {
                        round(expected[x][y] - generated[x][y], 4)
                        } expected: {
                            round(expected[x][y], 4)
                        } got: {
                            round(generated[x][y], 4)
                        }\n"""
        if len(msg):
            msg = "\nSome values are not equal: \n" + msg
        return msg

    def test_setXYZ(self) -> None:

        # Valid XYZ
        self.generator.setXYZ(15, 10, 10)
        self.assertEqual(self.generator.x, 15)
        self.assertEqual(self.generator.y, 10)
        self.assertEqual(self.generator.z, 10)

        # Invalid XYZ
        self.generator.setXYZ(-3, 0, -123.2)
        self.assertEqual(self.generator.x, 1)
        self.assertEqual(self.generator.y, 1)
        self.assertEqual(self.generator.z, 1)

    def test_setOctaves(self) -> None:
        self.generator.setOctaves(1, 0.75, 0.5)
        self.assertEqual(self.generator.noise.octaves[0], 1)
        self.assertEqual(self.generator.noise.octaves[1], 0.75)
        self.assertEqual(self.generator.noise.octaves[2], 0.5)

    def test_setScales(self) -> None:
        self.generator.setScales(1, 4, 16)
        self.assertEqual(self.generator.noise.scales[0], 1)
        self.assertEqual(self.generator.noise.scales[1], 4)
        self.assertEqual(self.generator.noise.scales[2], 16)

    def test_setExponent(self) -> None:
        self.generator.setExponent(0.78)
        self.assertEqual(self.generator.exponent, 0.78)

    def test_setSeed(self) -> None:
        self.assertEqual(self.generator.noise.noiseXY(0, 0), 0.0)
        self.assertEqual(
            self.generator.noise.noiseXY(-5, -17),
            -0.5234590815895944)
        self.assertEqual(
            self.generator.noise.noiseXY(5, 17),
            0.392517558040669)

        self.generator.setSeed(123456789)
        self.assertEqual(self.generator.noise.noiseXY(0, 0), 0.0)
        self.assertEqual(
            self.generator.noise.noiseXY(-5, -17),
            -0.7200741622627534)
        self.assertEqual(
            self.generator.noise.noiseXY(5, 17),
            -0.79179780448877)

    def test_setTileSize(self) -> None:
        self.assertEqual(self.generator.tileSize, 0)
        self.generator.setTileSize(2)
        self.assertEqual(self.generator.tileSize, 2.0)
        self.generator.setTileSize(-3)
        self.assertEqual(self.generator.tileSize, 0)

    def test_noiseXY(self) -> None:
        self.generator.setSeed(123456)
        self.assertEqual(self.generator.noise.noiseXY(0, 0), 0.0)
        self.assertEqual(
            self.generator.noise.noiseXY(-643, -234),
            -0.27525423557961687)
        self.assertEqual(
            self.generator.noise.noiseXY(643, 234),
            0.2521903471662688)

    def test_terrainGenerationNoPreciseNoRidge(self):
        expected = """```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```"""

        self.generator.setXYZ(20, 20, 50)
        self.generator.setOctaves(1, 0.5, 0.25)
        self.generator.setScales(1, 2, 4)
        self.generator.setExponent(1.5)
        self.generator.setUsePreciseHeight(False)
        self.generator.setUseRidgeNoise(False)

        groundAssets = [
            {"asset": "3911d10d-142b-4f33-9fea-5d3a10c53781"},
        ]
        self.generator.pregenerate(groundAssets)
        output = self.generator.generate()[0]["output"]
        self.assertEqual(expected, output, msg="Output strings are different!")

    def test_terrainGenerationPreciseNoRidge(self):
        expected = """```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```"""

        self.generator.setXYZ(20, 20, 50)
        self.generator.setOctaves(1, 0.5, 0.25)
        self.generator.setScales(1, 2, 4)
        self.generator.setExponent(1.5)
        self.generator.setUsePreciseHeight(True)
        self.generator.setUseRidgeNoise(False)

        groundAssets = [
            {"asset": "3911d10d-142b-4f33-9fea-5d3a10c53781"}
        ]
        self.generator.pregenerate(groundAssets)

        output = self.generator.generate()[0]["output"]

        self.assertEqual(expected, output, msg="Output strings are different!")

    def test_terrainGenerationNoPreciseRidge(self):
        expected = """```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```"""

        self.generator.setXYZ(20, 20, 20)
        self.generator.setOctaves(1, 0.5, 0.25)
        self.generator.setScales(1, 2, 4)
        self.generator.setExponent(1.5)
        self.generator.setUsePreciseHeight(False)
        self.generator.setUseRidgeNoise(True)

        groundAssets = [
            {"asset": "3911d10d-142b-4f33-9fea-5d3a10c53781"}
        ]
        self.generator.pregenerate(groundAssets)
        output = self.generator.generate()[0]["output"]

        self.assertEqual(expected, output, msg="Output strings are different!")

    def test_terrainGenerationPreciseRidge(self):
        expected = """```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```"""

        self.generator.setXYZ(20, 20, 20)
        self.generator.setOctaves(1, 0.5, 0.25)
        self.generator.setScales(1, 2, 4)
        self.generator.setExponent(1.5)
        self.generator.setUsePreciseHeight(True)
        self.generator.setUseRidgeNoise(True)

        groundAssets = [
            {"asset": "3911d10d-142b-4f33-9fea-5d3a10c53781"}
        ]
        self.generator.pregenerate(groundAssets)
        output = self.generator.generate()[0]["output"]
        self.assertEqual(expected, output, msg="Output strings are different!")

    def test_terrainGenerationPlaceObject(self):
        expected = """```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```"""

        self.generator.setXYZ(20, 20, 20)
        self.generator.setOctaves(1, 0.5, 0.25)
        self.generator.setScales(1, 2, 4)
        self.generator.setExponent(1.5)
        self.generator.setUsePreciseHeight(False)
        self.generator.setUseRidgeNoise(False)

        groundAssets = [
            {"asset": "3911d10d-142b-4f33-9fea-5d3a10c53781"}
        ]

        placeObjects = [
            {"asset": self.customObjects["Tree_4"]}
        ]

        self.generator.pregenerate(groundAssets, placeObjects)
        output = self.generator.generate()[0]["output"]
        self.assertEqual(expected, output, msg="Output strings are different!")

    def test_rotation(self):
        expected = """```H4sIAAAAAAAC/02afXycRbXHZ5+Z59nijbBml7ZAJUuSJqEpZbvpy1Jo+mSz3ZZm2yY0bcNLMECgMQQINlwjbw51heItGrAKXnlZoCrQgKtURAiwSJHyacQgvUixeFcsslgoEeMHrNwP9/zmTAh/fT/nzMyZmTNn5zlzkpeOvPSyIyqFEKH7ngv8e/s9qW0rftD4euOVNT8l3c1/P2Ha9g+WnvnD8dWLe8fPecsl3dC3Lyi7vnT+6ptujRYi/zryvQjpfn3XrWWfXHfNips3/vY3O3/9jZ1nkK6x5d6Z4RnrUjfelWna+cq6t48j3ZYNv6rbV/3sykf858er1Ys/u5x0h5e+MGfoaw+lbk/owTf2vfJuK+lSLwTmxa+7ZfkjezLnX5fMX4g52m+9p6Ft/XHp70/fNP2Ghx67A/bW3q0T8oJDzVvWfrLza3c1/h79HvzZP0+bflF49dCr5bknXnzu25tJt/funUs7P3iv+ZFnr7yr8Zyb644h3ePv/MT/4A/1a277af6TfzjhHoxd1XbxJV/93c7Mw2csv/q2VT37sY99fz/tyllPquZbP9SlaQO7r/0c6S7fcM2Vswob/V3njLx/5wVDz0P3wqKW6+ZkQmvufGs0t2vPeU9jfTOvfur63Zdct3znCU3zXnxndupE0j39yInbfvT8q6kbnzo2884bN3wRuqVLRv/7Lyt/s+LRLcffNr9MfwQ/3/bQ3+49+9S/pn903znJdZVPtmCONxbI+3f6v2zRseYjp5/b8DvoVmSjD5zw+X+v+Mnen5z34RePpOpI9+4tdcP1i6/O/PKYJSu/cHZ0J/b7X+//KP/XB4+s/M6GiaWzPqlOnkO6a2oTz0+/4KO1O747e/ZrYv2T8MFz+y/b0/NU7+rbbn/s44vff3IfdDv+1PjK+tnzV2T/55d3n3f31d2Y9570e2++dGlu9ZYl/3lA3bXtGaz59RkPv73/mpdXPN2Qzj87ctHXu0l31HNPvPvKiQ+u2rr6pSdPfHYoZs7y+vL3ju28x//5q9//y2tvbPoYutSa8HtD5R+0PHpJ/976gxf/Bf57+b2G9371UT51V9mTFV2znti9nnQRNyoLKa1AP8Es1Gs14pBcoVVWMjOKCT21B0x7gknjA+gHvemfsDLpMQ56Mz5hZdKb+cjeRIDYyyx0WrnNyikrJ6xcb+XJ9bTZ+drsetrsPL3cDnumvZcJ2fTrtfvotPtus/uelM34QrnfJmTEZR6w3OEVygv1TD9h5RS3k96LWGI8aMYlWA8auwnW0zjun7L9icYuzTMRIFYIOeIws5JpxlfYdVXYdVXY9dh+sGP6J5hYB+xhnbAHGvsJaz/BMvZl2uvtfG22fXI9hl2VOD8Q/jZyJ/xOci/OgzniMKGHX017GxPnin58Pqw3cgrnwnozvs3KJg7YXsQlVjARV0ZOWDll5TYrd1p5cj0JO1/Cridh56ngdo5fls166u2+Kuw+6u2+E3bfk7JpF3HyP/mbOeIwJwIijvMAcR5Grud2nAP6gxjP52P6GT1o7CZYz+fCNP3rcR48zw6P2Ia4YkYszfg2u642u642ux7bD3ZM/wQT64A9jl+msZ+w9hMsY18HuD/PV2HbJ9dTAX2uie+XXBPfLySb+4Vkc78wM4oJPd8vpr8h3y+sN/0TVjb3C+vN+ISVTRywvYkAsZfJ9wvJbVZOWTlh5XorT66nzc7XZtfTZufp5XaOX5bNejrtvnrtPjrtvtvsvidlaj8kB12xUsiimnlsvlEHD8rHq8UaIbTqWOA3ov2jZrRn1IJpIi7EiGNoZDo3I/O9tG8G9mFYr4MlybIhySPOQG2hE+MMBWTdyDJRRGVkMfoZmnNi2TCFfe5K8/yGEjLPbyi/xesSIOxFXJZByFhvcR78x8zKKVlvZBlEP9CMb2F74CDtK1enVV4xIcOfkEHfw36FZ1jPRHw+JlkGP5WpH/yCcSDsRVzyw0bE/UAtzUf7YRmEDH+JbviBmZVTctfpLIPoB37L+tfYJcKvNB+dCxMyzWtk8LADfwtpmGLidzjosgx+KlO/vOJxIOx9i89FgOx/lkH2/640+5uZlVMy+5+Jfux/Gt/C9sAP6caJVQlxp9wmu6qFfIY4VKmVo7bJMdLPIQ+EKOE9JVgd7l+m1fHBWLhwmg4uJo6fLmQVMeprtSxYF84ltdovd1eOfUXIBWqsMnelEF8g9m/WgZfkWGWM9D+WeyrHNwvZ4HTHh5bqYNrpj/vNWp1MDDUJbymxeIYOnuT0xLuW6OCHUiV5faEkry+U5PWFkry+aUms7y2ny8nXCvlnJ6pCdO6XOgOOJj+9rAYc/2Qd+JI74MTm68AN7rVyaImQa6i9lfzxXbfgFC4Q8hb3NTl+KfVzdssY/X7/QBwj+V/qXTV2mVa3OBOBoYuFOFF2ydaLtfqq7JHjNO5ENxfsukzIeW6fN36FDsx1hRwj7lV0lpSw/1MVZdelWj0K9giZpvm7aNxBT5S3ztPB//UK4dA8IRNepDxfo9VeYmi18FYTx9dTXLuzwqEOHfybjJQXq4WXkl3lsbN18F5nMDzWIbynnO7w+Gwh7yP2nyK8Lc62yNBaIYNy+xfGyA+fkyJcnC9kk5wW7l+MeErNKFJcXeCUTS+eJbwLnVx5gThAzGe0esjR4VYa/zox1qKDq+SscFe7Dh5SuZN82s/7qqtq/DIduNjddZK+SMhPnF0n5fu0upI4Rr+btc5IZde59Hah9hzdc0vpueQvECLpzKwKzaF+rqoao/v8I6WqonPg57nV0TodaHYXnNQfE/LnKleZi+lAh3qgMkTjfu4crMlRkn6fMzw7RP7Z4fiVUaIr/UqfzvuPTrQqN0cHviiJpyCuRypzNO4ax5+fX6PVDY5oGF8jvDrZPr91gw5ud9rnj58qZJjkEI1/UHbEx6u1usptnx/tEHKWl5s/VqXVM97j8SjF2/1eLh7aSH4mavLLG95oA/x8trcvFiO/rPfOiEdbhFfhrYzr5Vq96mUXRek784mXWRidI+T/ecX5PvEQsTWmg495I/E8jb+RODZfq+leRxz31FtO0ef4zSU5fid8jt8Jn+N3wuf4/biJ43fC5/j1mzh+O5Icv6kkx28qyfHb18zxO+Bz/BabOH5LTRy/1WmO33dTHL+6ieNXN3H8diU5fokmfj9uQvx2OCWJ+2OESPcKZeMl8w4oMRX0oOkX5/6470C67+j+Yj0IPQh9RrEd0072YW/SPt9jzJLcGtazcT9vDePe9L2tYbLngbiXQegHXdMvmFHMCMsKetyv0IMRlpUZZ74jLMM+7IGwb+Yz+VBdFX9n66qQl5RkXRW+G1FmAHrQ9NuI/dZV0ThDfFc7HNaD0IOcj7Md026+L1P2OZ9l5tWeONY96O4x+dmIsyeO/iDWCUIflaYffc+YWZaD0MMP0LMfDYNmnPkOsQz7sAfCvpmvHuvvSfL59yT5fHqSfP6GCno+f+oX5/58/j1JPn/Wg3z+rM8otmPazflP2efzZ2Yl4gPfeY4TyFifiZdG9KPzM/k1zg95AGR7/o04X/gddoz/pfFvG+yA7F/0M35O4HsOGfPtsfk71geZ1wmZ5wd1YI8aUz7pXTmqxlsKYlSNqljCdz9Pctcq3z1KQi6IYdUf0XTv3qv6Iq0x333D7YsUMgX5BMljsYKEPET6aTJUXVgl5F5VVh1aVZBKllWPdfrOcyTnWnznBQW5IHepfIOme+YZNdyQz/jTviGHG/xYwfsxybFMwYPcT/o9qrWZ15dp5vVlmnl9mWZeH+SCQP5G9z/tc4oiznkdWOL8S4LY/9GeoXe0zdNKEnkS+k+x2AU7zDTlPeif5jzIM/lUgvMq/t3tSvO8U+T5mZRlC5wXiPzbyL04P8q1+7EuZtSyw2HSO0nQ+4X2x6R3lKEZX2Ht1Vt7CSub/Jn70ftK8PvYzGuId6jhZHuFba+3+oSV+b1zDPJQekcY0rvkU1JcBY3cyKR9sky/x2nB3DFYF4h1GZnWtcPj8QdcZsSS3jGGpr/5/RPN+5UJu6Bpr2A7/M5jRixhh/v7FbwPv4L3RTLts8MB8d5glizzipkhwu9ZyRxxmGZ8r7XXae21WTnFRL9B18yrQD4XMy+dx2fae217p21vs7I5t+I83hdzh8ecFqRseTb8WJxHfjbE79zILXgvFufR+CCIe8DI9VY2fmRmJTOjmNyO+4bsmXNhYl4+Z2pvYzscB0zY4XNjDrq6kfehG3lfJJv4plWa+GZGLTsc5giR45uZUUwzvsLaq7f2ElY2fuJ+EwEzbwDkczHzMifbK2x7vdUnrEzntpny6eJqyjuJ/SuFqCLqZh3YogbDsY06uJ8Yot9znUsy5Z+dlB9Gqd93iEM07mGiPkurP6nH42N0PjcRx+ldlIBM+dRmynfYfkeS7XckYZ/iwePv6hSxT+jpu0X+KB7Lv4PisTh33wORL7Ce/Deb6yRTxHccetGN84gu5O9idCHOb8QBEQesj7i0ezPvFHl+UIinnTqJ+75AjK7X6k6H3g9n6cDdKheMnS1kNb0nCmt14Ndop/18WdXJrhoh1sk6OUbf3TtlyUG+f7cqBpEf/szZF8xTvP7TGQ0KyvPvUKPlRep3NFHMFXKJ8mcUThbeb6U/o3imDnaT7JO/57mj5dG5wjvijZYPpbW6nxhbqIOB4NZyvO8SnkZ/NeAOzgiRvVavb0brqTpY7vZV6jN1IEQs+jqwwC3W5Oj9FpfFmrEzhBh2ijU+2Tsa7XR+m2RfZe4KIa9TfZWxXiEWqLrKUL8QcRmtxfuhwp1Z69P3/I+qrFZQfrpHlcWj5M+z3LK4INa4epG/TsjvEqMNWn2s9KICnX+c+hVbhbzEKYv3L9LBp4hjK7T6krNnPt6TdbKA/sFDcteicbITksOL8qu1etoZbmL/Dzex/6Np9n80zf6Pptn/1G78P9zE/h9uYv/3NLH/u9Ls/440+z+Thv9N3SZh6zgJrm/gvhi0dRxTl9lo6zTm9851mKyt05i6S8LWYRKc13C9xzCQt3lNXk3lMXRPmTwG91XG5i0m37N5Co83DLwjZ7p6Bb1jpK/G03QPWULuWsky+LZ6PDJE35+/q2J4bCnTX6aDr1v5dSu/LTuq+9cI8Q+pq0JrhfijJeTcapbBQfVRQz/56QoVbYgtY+aXanWjlW+08jvyjmZeXyHJ62NC5vUx4Q/ka1HLww776bB5b+B+ZBmEfLzNA0HIyAvphjfvAxAy6kGQQeTduSbOC8G84nwRRP552GH5sMNyxOTJ+P2bPDEI/5Mdk3+DkGkeI4M4D14/87DD53TY5MtYN8sg5BKdJN0vgaghxmXNe6lkyO3oHzXEfVZt4gPE+Ig7RX63TBHrjsrdlXh3lAyx792VeI9EDTHvblN/LxniXuuOc17fbfablVPEeyGjpsh5s0ry+kGsXyV5/SC38/pVkuvmGYV78yveu2GO421V0U2oa81t4L97jJr3xTcpj86fJUSbYi5EHk32wBC9x1soL25tFvJ6yax3KS+m7zlYXKyD36Q8l8czET+oqyFuuN6G+OD3A35fOH/45bB9r5XM+fL7gPoFcX48nkn+Ogr+ArHfKBN+PYr/HrBgGv99wNDUUzFuhOutpO8+jt8vU8R5Qc/k+8UwxXXTT2nqvupk2Ad5vYbw+8k830AtaOrIKVsPbeH6Md41GbUjgXmycopYB/TMyToy318l+Rmaeye1kvefWsn7N5RR1kvcd7x/Q1PP5P0bys3OPtlK9+6tah99B3Wgxz0oW2uF2OkNhGO1OniEGDpTeIe8bFhv0KrTjVTl6TvTKCNVuSu06nGqq/KXC/kLZ1d8jO77S4jFBiGvcnbHdY0Obnbak2y/Pcn2u5OwP8L1DQni3YF7BsxalixRjwDfVJP1EJPB0ftzkiVD007fCxB+eNPG15vmnrLzxXk+fsdzXQTE+JKpc8CvXNcocT3CkN9fXKcocX3CMLoG+U11mOvm1WGuo3P9Avcc2iOW+J6AGUu0Yz7oOb6Ytq7ivalMfUJkDLk+we87ZtRyxPkscc58z4w4k+R6xwjXQ0z949M6SAsT+zHzbYS/jN6Q44XH452OdadtPSTN9QpD3BdpW8dIc/3CvOuxn8N0f3FdvjvOdXqub+CeRnvWsmSZsePQjvlKlhk7/2Guu8gRro8Ycvwws5YlS9QzOH4m6ykqyXEzyZ4kx4+plwiQ44fvlzfNd4LrMBw/XIcYsfUWEOM7bJ0OdbVJTtbnQFPnms11Lvgf5zxJ6E3dKgE7U5ysb4GoCyEPNnWi2bYeZQl9h60Toa4zycn6EM/f/h98PxkKyBzfhnR/TBzPdZiJ43HvHHBZBvn7sn0O/JFlSsj4e1iWSetfsITvzwVLMC4qWQYhZ+W+M3l+QwGZ5zc03wO+90vm/xBMHkH3/vGcR3j4HlCeIPB9yDVhHvM9MEQc4HvA40EdOMFtDQxRfn67Nx7K0zviF85QtP/LQrzoxGKt5I8T3LFlaL/K2S6HaD3dxDF6f13ljMoQ3Wc/IA5dplWzS6R77yhif4cQs4iF83TgcmKeuBYy5ckbXL6nzifm1wmRdqvV+DodWOm2q2I7tZN9QXnaQmJhkxCXE7tWaXWZ3C6L9E461S3I2BzUf3fI/Bwd+BoxeooQK1Qi3Fqr1aNOIuzXCO96pw9y8Cbi0MlCfij7wjGyv5841KrVdmKB4uF7xOIG4bWrvvB4O/y4Ldy1XsjZxCLd0yep3eGuduGVq4mwpvYhmqeL1nGQ5mmt0uoJkos1QjrBRHhskZBPeV3h8bPIj17KjPs2cYji7Fz3tcp++h30EWP1kMuqinS/Lyb21+nANoe4TAdeIA4tFXIX0T9NqwuJrafh7wckLxfiamcuzjXwFWJrEn8/7K4KJbXa6myvitK5X032xZlC/pDoUz55ITFHefmF6rXKaL8O3OuIqrFL8feJg5Wtl2q1kVjsEfI4dyCeX6+DD3sD8cIGIf/sDUNW+4n964T3ZXc4XqgT3k3E/rk6OEr06X7aS4zS/suI+HtB2h2N52qFdzqRXlbBZa5qyNUJucZd0KCpfUwNxHP07r6W5smfrYM/JjlK/j/fIaaFd7+Ti+PvMzudbBzjfk/sp/fsVc7MJMffzCTHXybJ8ZdJcvwRTfxlkhx/mSTHXybJ8Ueyib++JMdfX5Ljb0eS429fkuNvZpLjb2aS429mkuNvZpLjz09y/FUnOf6qk4i/qPmPCdwfWcn3hJHN9xe/3wMm72UizzzA+a8Hoq6D7xHqGyav7cT9Z2QVZZnsd9s6Oue3IOcvyG85X+X5VZLnN7K5v7m+PS3IdQAmZL73mFn5wHSuRzwwnesRkHHvQkZ+vbKG6xBMyHzvMgfdkq1HlGw9AjLu3dJC/v+Prct5fiZknp95gzMa9M/13Yw7GtTnFMRBeUZZF617C+n1vIJsJX1onu8My74ZobqCfJxYaPfdJd5rJ/jkj696fTOidf60rxPF+oK31i2rLSzxnaxTVqtPL8hD8tr63EVCrCF9/6aC0KQf3+S7u9zhRePtBe8Bok/ja+Ss0/GOLjnDi4pk/89EQfPdQO9qXl8mzesbWcXrI9msL5PG+kbIn/xOYWYtS5YZxcx/hvx9NhQ8nsnfUzqvRqtPMPk7YCiNnQQT3xuQ864HpiO/AJFvgFwHp/NsZPLfl6jdvAtBxCHG4TvGzFs54jIHLQ98hhg3aBmxzKtJrqzh/JxZksysZdRyxJki9o1x2AePZ/L3i+Kvzeo3MvF7MePM/50YvSH70YzD3/kWYjxo/863kP9/guIzwbR/B1zIf3cCzbt9Ie+LmbEy5d2GWcvoZ8i/J2bJMmPtjVC8c3wws5YlS8pvl3NcTJHjw1DweCbHB/2eGq0+weT4MJTGDtdplrMfzTgpxP8DjLzqkUQsAAA=```"""

        placeObject = AssetManager.getAsset(self.customObjects["Crypt"])

        self.generator.output = {
            "unique_asset_count": 0,
            "asset_data": {}
        }

        self.generator.place(placeObject, 0, 0, 0, 0)
        self.generator.place(placeObject, 0, 0, 10, 90)
        self.generator.place(placeObject, 0, 0, 20, 180)
        self.generator.place(placeObject, 0, 0, 30, 270)
        self.generator.place(placeObject, 0, 0, 40, 360)

        output = ConversionManager.encode(
            json.dumps(self.generator.output)
        ).decode("ascii")

        self.assertEqual(expected, output, msg="Output strings are different!")

    def test_fullOnePieceSmallTile(self):
        expected = """```H4sIAAAAAAAC/0Vaf3Bc1XU+q/d235N/SLvS6ofpdFh+GRHA3YIAgxtnDbIxscArsCMHMLNtPdgIGRa7NaLYnhssiEQg2hgwa0OcTUfNuJ427LiUmmKmgkyBukm8DRmPw6idHTdplJmEKFPa8aSepN93zjX565tz7rn3nvvd755730rf//X3/61FIhF5609Lpx65P1r1dz97ddG97w9v2xyI3LrkTGb/7r+4bfz3vrVr8QOVvSnErb554nPB9nWf/+ZbQx2d33nzo7vhC8+vX9e/+vI7xn/4jRWHb3v+S/TNPvytn3z3pp7bXn/vm8efu37/z+j7cvWK6rv3/HDVX63/48IbfzOfOwHfVy8+8vCrh1bffrD9mmNPHnv1/M3wfZLY1Fq4mDjTUbjYJT5JnMsY5jPm35Y2rLUDA7a7K2jniQHb3RUuZLvhmbYL7TNXW/vM1dZueKYNiPHTbWbnM3KdxRnW2g3PtMl11l5Y7vNYzn7IQ23ksdLydCt9Hit9HornMjMD1m6IPAbML+v8vOvYD+seMj8wQdsN+/GH2T7RObPZ4mY2Gz+whX7ZYn4g7GK2MMJxJjoNe7tcmVjMAhO0Z3Yxvpg17O2SPfQXs0CNL+yj3exyk77/JMc90j0zZf6ZKdrLe+UA+5d75AD9R7qJm1qaXdy3TS29HpGPIvK52IWbWnR/Q/q5b/RjvxL0c982tXBfzea+0TbkPpqf+0E/MEH/BRv7oXHcHx1npe8/IKLx6xiX96g8q10YsnbyTJu8a7/Nlq9s8fNtod941XWMMN541XWU2a78Cv0zuxjXBL+MI8/WXthnNvhVfsgz48iv9p8yPxD+3/EKvrU/7PAE/OTxhOf7hPItQqTuTxi/QPIrAZE8njBe5YTxmCBSxyeMP0XwpgjeEK+6DU8Yb4kTypfZbphoPGncZsYrTzoP+dFxR9hOniwP6pHthuTL2oG6DuqRNvnSde2zdkPw723o0sabtHUYkjdbN3nU9U759Uz58Q+wH8Y/YHHGJ/gA5gLlNZELlFfYvZ8i9ZkLjNdcoLwqks9cYLwSySuReswF5JX9TI+5gHWCdl75zQVWD2ijDght1gPa0KW2k2/tN8z2vPLN8ahL7aeofIvON0Jb9RjQT56ZP3lm/uRZ81a0c0/7AlKfOt4+P563WQd0HZOWhyHq3STHIb+WN3nWdU1ZXuRZ8z1Af15x3PM7rvxKMO75HVd+2Y48r6af/NJGftfRJr8i4xxPbeN3PND6HIwbv4jXOqxInsc9r+PKJ/ubfjVu2PqT13Hl08YHjwkdd4Q2ebT5DI0/+nne6Wc9HTce1c9zr3nusXEMlU+d3xD57PP5TnJ+3BuTtHF/Tfr8p8xPHdNvqDxq/tQz241X3FfAOeMXaPzOBVYX5ky/wZzy68I5z++c8ktb+UW71tdwLrC6MOf5nfP6nVN+aRu/c8xvwPysr7TJ95zpNzFnfCfmPN9zxrf6ybfOM2Ljk+85z7P2K5tNvrXfLutPfnW+PfRjvj02P/VK2/BMG3meUz6JafKKuLWLDY1P+g3XLqaO5z7lMU0MB0PT62DY+ymSx8HQ9Eokj4Oh1QMi68BgaHodDE2vROp1MDQ+B0N9T4RE8jkY6rshQeR7YTBEfgNmk0+NH7I48spxWBe0/7CNy3cBkbzqPCOG5FPjytaPuqVNXnU+tckjEev3SB4Hw7TyOBiuXWy28TcYukWG5I3juEXkj/E89/STx7rnrR7qeyCsG39S9/zVQ3sH1I3HsO55rIf2Dqgbj0C79+th/lMkf3XlkfH2Lqt7HuvIn7zWjcewbjwKbeq07vmsG59h3fgM6p7Pemh1oW58BjrfCMdFvxHrT33qfB6pT51PMd12waZOaVOndfLikfdZHbyxDtSVT45zfCHPf135JB5faKh8ajwxm7T3VTbJ95UE2aS9r2izntI2tPcy/eSTfvJMP3WbTeY9Gr+0qdtsUt/DiuQ5myS/hqwD2aTyK0S+s+gnr7QNrd5qvyHOS16JplPahsavzqeIcbb4eUeYD/orQo8jNh7vNZ1fMU1MEKnjbBJ63MVxyDNt8LWHccoz8PhC6phInonUrcYdMJv8jimfImNJ+x4ZS+r3SDDGvNQ2Xumnfuk3tO8O2uR1LKnfHdrOukqbeh5TPolY13K2k09D6nXM8zmmfHIeO/c6z7C1G5JHs1lXtf9mm5d8an+PrLNj4OkCUrdj4In1YUx54zjQnUfyNkY+PLIOjCXnF5DHMc8fbUPjccx4tH64n2Y9X7NJ/X6TWeahSL7Yrt9tCfoNjS/a5HFW+XLhrNffrOnP4ldaO++hWdOhxa9jnOlw1vOm8ypi/UN+3mGLoy7pN1T+QtrUp46zxfqRx1nqagv9yqPQNoS+RtiPfDIe57lMP3gq009e2R88Kc4vuGCTX9q812aN38Ss8urjp3z8lM3D+jrr+S2klE9F6rGQSpPHkDbraCFl/NGm7gopO8/0s17S5jmmTV6JPM/af8D3W0dMU4cBkfWykMK6h8zP+502+SuksO5hi+N3Af2GWL+3ySftC0g9FlLQ1wht46uQwvo9kqdCqo8otMkXbdZV2tQjbZ5r7Tdp47JucjxD40/nP+Dnh06nPX/TXBd0OW38JaY9f7RZL6c9j9PGI/x67wTTnsfplL2Ppj2f08qntZNPHW+Atp3nac/nNPNRW/nEvODDI3mcJh/DbFf+hDbP97TyZ+0XkDxqfJlxxt80eOH5nlb+2E95g7/Uyvo4bbxZ/KSPn2S88hdOG3/htOdP8z7AcYzHaeMxEUfGYxyRR9qmQ/rJH21D+50ljqwOst3Qvt/ZTj5pk0fa1CXjyS+RfOq4imnllUidxhH5JCKvdWwnn0TwM0Q/+TSkHonUobaPEKGnEfrJH/v1KY9E6i+OSq0XkPqjn/qjzXOr/SZ9v0mOYzrU+aZsXLPtnal5H2C83e+aN3DU80nkuR5VPomsj+anPkcjew+NRna/jEam09HI3pmjxmMw6nkcVR79OAN+nAH603reR5EHeR1VHtluPI4aj7DJI23lMTEamR5HI9PhqOdx1HiUUeWRtulw1PNIpA5HlUfzkz+Nn6Rf+dN5yduo529U+SOaDjXPAxZHu6G8Ee33wIbnrxHZ74CNyH4HbHjeGqZHtOv7PNEwHWo79daI7Dw3PG86nkfy1/C8NYy3oGH6wzjKG2zwso7tpr+G561h+pOG503bR4imv4bXH5H3cSOy89vwvGncPsb1edT7WP2GxlvD89YwnVl+inaP9Md2H/fHWv+C/pi8mZ/89cfGG/3UXX9sv5fST53Rps5oX0DqTMdZ6cdR2+4TzkOe+mPyRdvqX39sOiOy/vXHypcizyuR9zKRfGn7COOt3vXHpjMi7wuN22N+ntP+uM8j3zEWR944H/nScSYtH9Y7+skb86WuNE9gNbbfoauet2ps9a4a2/uvavwFVeWN7cob0N7V1djqH/3UXzW2+1jHXW5+nteq560am86qyhtt5U2RfFWVN9rGW1V5Y7zdG9XYdFaNrc5p+wjnM97Yj7rSuF30G3867h4bh3rjfORL59ln/c3mdzWR34XWzvtX850yP/nkOow/4/N8bOf0vPEXnve8nfe6o99sO6/0811Iv6HeH0I/dUi/IXi5zvrxHtF5FNPEgO0X/DzfOs9Kjof8V7Id+a+0OPJOm/XwvOf5PPlYR9vO83nqaMhs3te0Da0u0ib/543/kOPwfJ/3+tX5yvTrfti8uyyO+6Lr2mN+6lnz2GN88N7Wde2z/Lkvuq5J83M/lLcpW6eh/V6kvOH8l1pNv6VW9IeuaZN32oZ2b9M2RF7eJs+0yXupFeu7juMpv+qnruk3BE/L2W780k/e6Tckz0TwNsB28Dbgx11n/VlPdZwhjoO6N+T7D1s7+db4LebnO13zGDE/edf1lS1P8q35lNmu3+0JXe8uWz/vKfrJN/3knzZ5JpJn7TfleZqiTX5p/45f4jstcXf5Xhe9kqp31u8UeTs111E6JMHDUb1TXhF5IvqgPY/5/j6Sdnmav0unewuIP5w63lVC/Fup+ewM4h+JjnfVD4nsjhqZ5p+L/GMUZ/KI72up9jRzLky0NLobV7ron4GVz4p8Ayjo/3LL/BL3uAtrwNI+F/2gpW+J7HDR+7DncY6XBH1LShUJtgXVngb275Kg0V1a5aL1wBp4exftxT+U4BXYMytc+C9BoauC/agFcffM/RK8CSxuleBX8LtBF302jLtrm120Mmx0Nx8R2Qq78ogLNwCp52fCsWzauejdcH5Jc6kL34Jd2O2i/wxzHUXwcWey1CtXieSTY9n8XSI3JuPuxkMiw8lNmfxBF36Z9jUuejFZ7ywij58AeY6eRHvtSy6aSVbSNfCyIFXomrlcgp9jnPnPSfBT4mqRP0p90F4bd9HCFOKr/G6od1Yuc9Ffwo/9jRLYl+Ll+C5LjWVnbnLh26m42xVc9KuUtJeR/4JoU6b0ksgl0VxHrk/k4Sjuzt/sog74CxtFrsY+FqGPP4BdecFFUxHWe7sEP4oq6TL4mEB7A3m+h30vfgXrjOPuZr+LLophPymyPq535nEPvxhX0kXUj0PxXIeDjn4bF7rmr3Th64gXxNcZdwf0grjcdhf+HHHll1y0vLXemUb+a1srafcFF36mFflC9y+0znVIXoJ6a65DbpDgKfjza1w0gbj0EHX7Qfv83S56Aij3u/A1tNcepk4kW4EeD6aOZAT78U+pZjoNPT4UHcmUsF+PRzOLK9Dva9G5Rc1xF/a0VLoKORd1tnyQLfdhf4E1nPuXgLm7JHi6Za6nuctFx4CC+B+35HpqO/Bugd14SuTSINdTwHnaEVS66jeJXB98kJVbXfhFoIMOvov2fF5kEnZuhYs+DJZ3lj8vcjSQbO0+ke8A8w+KBOHyztydLlwfSrbwAO71EOPg3G+EPb/dRQ8Am+C7GpY76o6/r831FJa66Huwm7td+KOwN11+VYLbkpu6c5+RYGmy3FFcL8E1SfTHuVidLLZXquAFdvlaFx5OHsnkkceHwMajLnoe7YWnXPjt5EQbznWUTS3vrF0m8r8Yp4H30b8DqYu7UjOLC9BrV6rY7l4WuRs857B/r8PfRL35Jew69HkyVe7I3eSiUynJ5la58P9S5xYVd4tIhH6oO91RM124SoI9kWQbN/N7othe+gLOM/al/KwEq2DnX3ThwajcwXNwKppoqzwqwSG2I88T2MfycxLcGkvW3eDCdAx7N9YZH8kUl0rwbDzRVn5AgkrcTNdeluAX8fLOIurNe4iv9WP9iKusddFRxLlRF/0GcWl8zyxtPZIpI/8bWyfamhtdlGtFvo9J8PXWZrq5DHWstTfdvB56h7+xxoX7ETe/HvvfCl3d48KtwNJ9LnoH7YVRF77fci5Tgx6r/C6HHt/BdzX1uA3vdOpxF969psf5BQ3V40RnEfWxs2Wmo9TnIv7dD3qUA0DoUZ5uaXbN4949RsT5/3FLb1cF9fEUbOgxuJR/T0GdfyyY6IQeg+uDmY551MdN/PvQQxL8K9qhx2ASdh718QdBPgM9Bn8dIM/7WD/PZaDHIAjzmfSdqKsh7AdcdAN/38a53Mjft1EfNwOhx6AabkvXUB/rYbOriPr4PdgN1MePwnQb9CgDyWIWepQrk9vS0KNcmzyXgR5ldXLt4loV+wu7dK2Lvp6stUOPwYfA+Udd+Dza80+56NtJtygNvXWm8hnoMfgfjAM9Bv8BhB7lLnz351WvuCexz3eDZ9ST6HX4G+Dnl/xd4zIXnkxtS+dRH0+lzmXS4OPXqfkF0GOQwHcG61Uvv8dQx/fg+2oG9bEVfuhRLsW+QI+yCnbuRewjvrOgR/0ugR7lENpLyPNt7CP0KLfG5zLlG1yUwTsJepQ1eMdAj/IVvIegR/ka3jPQo/wC7+wS6uN7iK+gPh5GXG2tC48irgLd/MbeodFS3NMO+d+I+39+owsv4XvgMZFXcW9Dj8GbuLehx+BFvgNQH7/GOJz7HXy33OOircDyfS58B+056Hwp9JjDeSGWVhCpK+JEZ2kD6gYQeoWNfdsqshT6Km0nNrtqO3GuYNf6XOJZxHF+Isd7lnpdIUKsrWL7TEfzdkPWUfXf6/0l328rsZjF+MAj3TnHcTDPc8RyT+6gBB/TRl3+mPmtIHJ8kY+Z/wazOZ62byciv+cMm/tRn4JyT+lSIschchyijhPcDb03bzcEDwkixyWSB8ZzvDeCI92lS13iDT/OGzhHzWUufINxq9iez/B8EtE/of57aYOX7USMs5MIXp1LXBRyPJGLcM4wvyL3gcj+F4XW/6Kw1k4e9oY2316cL8bv5fkr0Y+8t5rN9RM5z16cP/JIJA9ncT4531kbJ3E21H0D1tq5/rM6ngvP+nHOIo/aTtqY3zFu7WKOswbnmftPZD5rktjfG2gj7xUSrMG5xP7Dr+OK+jfQnyefiNO84Yd+n2AcztkzLnEU43Dco2xHnT2q/WlvS5NX2szrKPoxr6PJNPujHbp2tN0ijKOI/RIi89X2gyJtqB9cfxvqQA7vCSJ1QKSeiORB/RuImB98tKXA407aWP8TtI8vZL5E8rsDcRg3IFIXROa/g/VqFdvPtHE8IveTyH3bkUKe2KfT2t8lTrO9j8j+Ljzt8zydMl5Pp0xnpzVPtqfbqNPTzKvEfljnVo6n4yJufkHzCUPme9rnq/H7bT7yckuk+QM5vwS0ea5vifJaJ26JrE4QuR7G8ZzcgvrH9RA5L7G0nX6dF3bfAu4L7dIzNm7uoEscRv2k/g5HrEMSHI7Sbdzfw6y3G2hj30pE5LuTflsHkTo8zPnxrm6JrY4RyUtLzH0RaYl1feGDsY1PJH8PxnmNezBWXaFd55MHY5uPyHNKhL4Saj9D287PSfbH/hDJx0nrH5yMdf2K1CX9XP9J9GP/k6z34H0Z6jh1tox1GPwtazX+iDwP9JO/ZaznWO9+1HfoIiRyX/bDz/XsRz1n3kSep/3WD3HQC+pERwvvH5GFqJtF3BOPsy6vxb3DOor3407Uo/KtuDdRj3K4v65CPUuPibzE/7tAv+dRt+q34buAf4fGvTfF/wdAnv9lf5+X/0b9yT/O+xvvjktE7sD5rGP/7uPfGf9E5G9hV3CujuO81taIvMu/1+0V4X2duxa6oH5vFPl94i0in+Ac1/9MZAn0Wdkn8tMk7quvivTw7wsv4HsMcfV+kS/yfGD8j3AO8sj/FHScroispQ5Hqbf5BfmnRe7lff4C31XYZ9znj1BneJfvBTaQ1z+gvbGB6BblsZ7H+Hsm3l+/RXwD791MjHcY8u2GnorI53rqAPk8HiOPq0U+x99FHgZf3Hd8165l+7jIPv7ugbhj/J0DfBynDvD9/zrvddz3i7H/RZyzjdinMt5DfcAC6sQx7G8Oeb5GHQyCb36vgw+R/wfKgx/aCCsAAA==```"""

        self.generator.setXYZ(20, 20, 30)
        self.generator.setOctaves(1, 0.5, 0.25)
        self.generator.setScales(1, 2, 4)
        self.generator.setExponent(1.5)
        self.generator.setUsePreciseHeight(True)
        self.generator.setUseRidgeNoise(False)

        groundAssets = [
            {"asset": "cf6063bb-5c6e-4107-b3e9-9c0c5ac75768"}
        ]
        placeObjects = [
            {"asset": self.customObjects["Tree_3"],
                "density": 10,
                "clumping": 32,
                "randomNoiseWeight": 0.8,
                "randomNudgeEnabled": True,
                "randomRotationEnabled": True,
                "heightBasedMultiplier": 0.5,
                "heightBasedOffset": 0},
            {"asset": self.customObjects["Tree_2"],
                "density": 16,
                "clumping": 16,
                "randomNoiseWeight": 0.8,
                "randomNudgeEnabled": True,
                "randomRotationEnabled": True,
                "heightBasedMultiplier": 0.5,
                "heightBasedOffset": 0},
            {"asset": self.customObjects["Tree_1"],
                "density": 10,
                "clumping": 1,
                "randomNoiseWeight": 0.8,
                "randomNudgeEnabled": True,
                "randomRotationEnabled": True,
                "heightBasedMultiplier": 1,
                "heightBasedOffset": 0},
            {"asset": "98259887-53c2-41d4-a54f-6140b6acf020",
                "density": 50,
                "clumping": 3,
                "randomNoiseWeight": 0.8,
                "randomNudgeEnabled": False,
                "randomRotationEnabled": True,
                "heightBasedMultiplier": 1,
                "heightBasedOffset": -10},
            {"asset": "6ba81f8e-9a9c-4745-990f-2cb27bb29cfc",
                "density": 20,
                "clumping": 16,
                "randomNoiseWeight": 1.0,
                "randomNudgeEnabled": True,
                "randomRotationEnabled": False,
                "heightBasedMultiplier": 1,
                "heightBasedOffset": -5}
        ]
        self.generator.pregenerate(groundAssets, placeObjects)
        output = self.generator.generate()[0]["output"]
        self.assertEqual(expected, output, msg="Output strings are different!")

    def test_fullManyPieces(self):
        expected =   [
            {"x": 0, "y": 0, "output": "``````"},
            {"x": 0, "y": 1, "output": "``````"},
            {"x": 1, "y": 0, "output": "``````"},
            {"x": 1, "y": 1, "output": "``````"},
            {"x": 2, "y": 0, "output": "``````"},
            {"x": 2, "y": 1, "output": "``````"}
        ]

        self.generator.setXYZ(20, 20, 30)
        self.generator.setOctaves(1, 0.5, 0.25)
        self.generator.setScales(1, 2, 4)
        self.generator.setExponent(1.5)
        self.generator.setUsePreciseHeight(True)
        self.generator.setUseRidgeNoise(False)

        groundAssets = [
            {"asset": "cf6063bb-5c6e-4107-b3e9-9c0c5ac75768"}
        ]
        placeObjects = [
            {"asset": self.customObjects["Tree_3"],
                "density": 10,
                "clumping": 32,
                "randomNoiseWeight": 0.8,
                "randomNudgeEnabled": True,
                "randomRotationEnabled": True,
                "heightBasedMultiplier": 0.5,
                "heightBasedOffset": 0},
            {"asset": self.customObjects["Tree_2"],
                "density": 16,
                "clumping": 16,
                "randomNoiseWeight": 0.8,
                "randomNudgeEnabled": True,
                "randomRotationEnabled": True,
                "heightBasedMultiplier": 0.5,
                "heightBasedOffset": 0},
            {"asset": self.customObjects["Tree_1"],
                "density": 10,
                "clumping": 1,
                "randomNoiseWeight": 0.8,
                "randomNudgeEnabled": True,
                "randomRotationEnabled": True,
                "heightBasedMultiplier": 1,
                "heightBasedOffset": 0},
            {"asset": "98259887-53c2-41d4-a54f-6140b6acf020",
                "density": 50,
                "clumping": 3,
                "randomNoiseWeight": 0.8,
                "randomNudgeEnabled": False,
                "randomRotationEnabled": True,
                "heightBasedMultiplier": 1,
                "heightBasedOffset": -10},
            {"asset": "6ba81f8e-9a9c-4745-990f-2cb27bb29cfc",
                "density": 20,
                "clumping": 16,
                "randomNoiseWeight": 1.0,
                "randomNudgeEnabled": True,
                "randomRotationEnabled": False,
                "heightBasedMultiplier": 1,
                "heightBasedOffset": -5},
            {"asset": self.customObjects["Tree_2"],
                "density": 20,
                "clumping": 16,
                "randomNoiseWeight": 1.0,
                "randomNudgeEnabled": True,
                "randomRotationEnabled": False,
                "heightBasedMultiplier": 1,
                "heightBasedOffset": -5}
        ]
        self.generator.pregenerate(groundAssets, placeObjects, [3, 2])
        output = self.generator.generate()

        self.assertEqual(expected, output, msg="Output strings are different!")